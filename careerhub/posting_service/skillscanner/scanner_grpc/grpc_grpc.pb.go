// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: careerhub/posting_service/skillscanner/scanner_grpc/grpc.proto

package scanner_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScannerGrpcClient is the client API for ScannerGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScannerGrpcClient interface {
	GetJobPostings(ctx context.Context, in *ScanComplete, opts ...grpc.CallOption) (ScannerGrpc_GetJobPostingsClient, error)
	GetSkills(ctx context.Context, in *ScanComplete, opts ...grpc.CallOption) (*Skills, error)
	SetRequiredSkills(ctx context.Context, opts ...grpc.CallOption) (ScannerGrpc_SetRequiredSkillsClient, error)
	SetScanComplete(ctx context.Context, in *Skills, opts ...grpc.CallOption) (*BoolResponse, error)
}

type scannerGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewScannerGrpcClient(cc grpc.ClientConnInterface) ScannerGrpcClient {
	return &scannerGrpcClient{cc}
}

func (c *scannerGrpcClient) GetJobPostings(ctx context.Context, in *ScanComplete, opts ...grpc.CallOption) (ScannerGrpc_GetJobPostingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScannerGrpc_ServiceDesc.Streams[0], "/careerhub.posting_service.scanner_grpc.ScannerGrpc/GetJobPostings", opts...)
	if err != nil {
		return nil, err
	}
	x := &scannerGrpcGetJobPostingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScannerGrpc_GetJobPostingsClient interface {
	Recv() (*JobPostingInfo, error)
	grpc.ClientStream
}

type scannerGrpcGetJobPostingsClient struct {
	grpc.ClientStream
}

func (x *scannerGrpcGetJobPostingsClient) Recv() (*JobPostingInfo, error) {
	m := new(JobPostingInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scannerGrpcClient) GetSkills(ctx context.Context, in *ScanComplete, opts ...grpc.CallOption) (*Skills, error) {
	out := new(Skills)
	err := c.cc.Invoke(ctx, "/careerhub.posting_service.scanner_grpc.ScannerGrpc/GetSkills", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerGrpcClient) SetRequiredSkills(ctx context.Context, opts ...grpc.CallOption) (ScannerGrpc_SetRequiredSkillsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScannerGrpc_ServiceDesc.Streams[1], "/careerhub.posting_service.scanner_grpc.ScannerGrpc/SetRequiredSkills", opts...)
	if err != nil {
		return nil, err
	}
	x := &scannerGrpcSetRequiredSkillsClient{stream}
	return x, nil
}

type ScannerGrpc_SetRequiredSkillsClient interface {
	Send(*SetRequiredSkillsRequest) error
	CloseAndRecv() (*BoolResponse, error)
	grpc.ClientStream
}

type scannerGrpcSetRequiredSkillsClient struct {
	grpc.ClientStream
}

func (x *scannerGrpcSetRequiredSkillsClient) Send(m *SetRequiredSkillsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scannerGrpcSetRequiredSkillsClient) CloseAndRecv() (*BoolResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BoolResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scannerGrpcClient) SetScanComplete(ctx context.Context, in *Skills, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/careerhub.posting_service.scanner_grpc.ScannerGrpc/SetScanComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScannerGrpcServer is the server API for ScannerGrpc service.
// All implementations must embed UnimplementedScannerGrpcServer
// for forward compatibility
type ScannerGrpcServer interface {
	GetJobPostings(*ScanComplete, ScannerGrpc_GetJobPostingsServer) error
	GetSkills(context.Context, *ScanComplete) (*Skills, error)
	SetRequiredSkills(ScannerGrpc_SetRequiredSkillsServer) error
	SetScanComplete(context.Context, *Skills) (*BoolResponse, error)
	mustEmbedUnimplementedScannerGrpcServer()
}

// UnimplementedScannerGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedScannerGrpcServer struct {
}

func (UnimplementedScannerGrpcServer) GetJobPostings(*ScanComplete, ScannerGrpc_GetJobPostingsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobPostings not implemented")
}
func (UnimplementedScannerGrpcServer) GetSkills(context.Context, *ScanComplete) (*Skills, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkills not implemented")
}
func (UnimplementedScannerGrpcServer) SetRequiredSkills(ScannerGrpc_SetRequiredSkillsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetRequiredSkills not implemented")
}
func (UnimplementedScannerGrpcServer) SetScanComplete(context.Context, *Skills) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScanComplete not implemented")
}
func (UnimplementedScannerGrpcServer) mustEmbedUnimplementedScannerGrpcServer() {}

// UnsafeScannerGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScannerGrpcServer will
// result in compilation errors.
type UnsafeScannerGrpcServer interface {
	mustEmbedUnimplementedScannerGrpcServer()
}

func RegisterScannerGrpcServer(s grpc.ServiceRegistrar, srv ScannerGrpcServer) {
	s.RegisterService(&ScannerGrpc_ServiceDesc, srv)
}

func _ScannerGrpc_GetJobPostings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanComplete)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScannerGrpcServer).GetJobPostings(m, &scannerGrpcGetJobPostingsServer{stream})
}

type ScannerGrpc_GetJobPostingsServer interface {
	Send(*JobPostingInfo) error
	grpc.ServerStream
}

type scannerGrpcGetJobPostingsServer struct {
	grpc.ServerStream
}

func (x *scannerGrpcGetJobPostingsServer) Send(m *JobPostingInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _ScannerGrpc_GetSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanComplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerGrpcServer).GetSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.posting_service.scanner_grpc.ScannerGrpc/GetSkills",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerGrpcServer).GetSkills(ctx, req.(*ScanComplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerGrpc_SetRequiredSkills_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScannerGrpcServer).SetRequiredSkills(&scannerGrpcSetRequiredSkillsServer{stream})
}

type ScannerGrpc_SetRequiredSkillsServer interface {
	SendAndClose(*BoolResponse) error
	Recv() (*SetRequiredSkillsRequest, error)
	grpc.ServerStream
}

type scannerGrpcSetRequiredSkillsServer struct {
	grpc.ServerStream
}

func (x *scannerGrpcSetRequiredSkillsServer) SendAndClose(m *BoolResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scannerGrpcSetRequiredSkillsServer) Recv() (*SetRequiredSkillsRequest, error) {
	m := new(SetRequiredSkillsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScannerGrpc_SetScanComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Skills)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerGrpcServer).SetScanComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/careerhub.posting_service.scanner_grpc.ScannerGrpc/SetScanComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerGrpcServer).SetScanComplete(ctx, req.(*Skills))
	}
	return interceptor(ctx, in, info, handler)
}

// ScannerGrpc_ServiceDesc is the grpc.ServiceDesc for ScannerGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScannerGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "careerhub.posting_service.scanner_grpc.ScannerGrpc",
	HandlerType: (*ScannerGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSkills",
			Handler:    _ScannerGrpc_GetSkills_Handler,
		},
		{
			MethodName: "SetScanComplete",
			Handler:    _ScannerGrpc_SetScanComplete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobPostings",
			Handler:       _ScannerGrpc_GetJobPostings_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetRequiredSkills",
			Handler:       _ScannerGrpc_SetRequiredSkills_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "careerhub/posting_service/skillscanner/scanner_grpc/grpc.proto",
}
